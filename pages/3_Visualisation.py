import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from pathlib import Path

st.set_page_config(page_title="Visualisation", layout="centered")
st.title("üìä Partie III : Visualisation des donn√©es nettoy√©es")

# ‚úÖ Choix de la source des donn√©es
st.markdown("### üöÄ Chargement des donn√©es")
source = st.radio(
    "Choisissez la source des donn√©es √† visualiser :",
    ("R√©utiliser les donn√©es pr√©-trait√©es", "Charger un fichier CSV"),
    index=0
)

df = None

if source == "R√©utiliser les donn√©es pr√©-trait√©es":
    if "df_pretraite" in st.session_state:
        df = st.session_state["df_pretraite"]
        st.success("‚úÖ Donn√©es pr√©-trait√©es charg√©es depuis la session.")
        st.markdown(f"üìè **Dimensions :** {df.shape[0]} lignes √ó {df.shape[1]} colonnes")
    else:
        st.warning("‚ö†Ô∏è Aucune donn√©e pr√©-trait√©e disponible en session. Veuillez d'abord passer par la partie II.")
        st.stop()

elif source == "Charger un fichier CSV":
    uploaded = st.file_uploader(
        "T√©l√©chargez un fichier CSV pr√©-trait√©",
        type="csv",
        help="S√©lectionnez le fichier g√©n√©r√© √† la fin de la partie II."
    )

    if uploaded is None:
        st.info("Veuillez t√©l√©charger un fichier CSV nettoy√© pour continuer.")
        st.stop()

    try:
        df = pd.read_csv(uploaded)
        st.success("‚úÖ Fichier charg√© avec succ√®s !")
        st.markdown(f"üìè **Dimensions :** {df.shape[0]} lignes √ó {df.shape[1]} colonnes")
    except Exception as e:
        st.error(f"‚ùå Impossible de lire le CSV : {e}")
        st.stop()

# ‚úÖ Choix des colonnes num√©riques
st.markdown("### üß™ Choix des variables √† visualiser")
colonnes_num = df.select_dtypes(include='number').columns.tolist()

if not colonnes_num:
    st.warning("Aucune colonne num√©rique d√©tect√©e.")
    st.stop()

select_all = st.checkbox("Tout s√©lectionner", value=False)

selection = st.multiselect(
    "Choisissez une ou plusieurs colonnes num√©riques :",
    colonnes_num,
    default=colonnes_num if select_all else None,
    help="Explorez la distribution ou d√©tectez les outliers dans vos colonnes num√©riques."
)

if not selection:
    st.info("S√©lectionnez au moins une colonne pour afficher les graphiques.")
    st.stop()

# ‚úÖ Type de graphique
st.markdown("### üìà Type de graphique")
graphique = st.radio(
    "S√©lectionnez le type de visualisation :",
    ("Histogramme", "Bo√Æte √† moustaches"),
    index=0,
    help="Histogramme pour la distribution, bo√Æte √† moustaches pour d√©tecter les valeurs aberrantes."
)

# ‚úÖ G√©n√©ration des graphiques
for col in selection:
    fig, ax = plt.subplots()
    if graphique == "Histogramme":
        bins = st.slider(
            f"Nombre de bins pour {col}",
            min_value=5,
            max_value=100,
            value=30,
            help="Ajustez le nombre de bins pour l'histogramme."
        )
        ax.hist(df[col].dropna(), bins=bins)
        ax.set_title(f"Histogramme de {col}")
        ax.set_xlabel(col)
        ax.set_ylabel("Effectif")
    else:
        ax.boxplot(df[col].dropna(), vert=True)
        ax.set_title(f"Bo√Æte √† moustaches de {col}")
        ax.set_ylabel(col)

    st.pyplot(fig)

st.success("üéâ Visualisations g√©n√©r√©es !")
