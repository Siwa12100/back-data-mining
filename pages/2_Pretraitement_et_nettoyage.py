import streamlit as st
import pandas as pd
from pathlib import Path
from src.classes.file import File
from sklearn.preprocessing import MinMaxScaler, StandardScaler, RobustScaler

st.set_page_config(page_title="Pr√©-traitement", layout="centered")
st.title("üßπ Partie II : Pr√©-traitement et nettoyage des donn√©es")

# ‚úÖ Chargement des infos de session
if "csv_path" not in st.session_state or "delimiter" not in st.session_state:
    st.warning("Veuillez d'abord charger un fichier dans l'√©tape 1.")
    st.stop()

csv_path = Path(st.session_state["csv_path"])
delimiter = st.session_state["delimiter"]

st.markdown(f"üóÇÔ∏è **Fichier charg√© :** `{csv_path.name}`")
st.markdown(f"üî£ **D√©limiteur :** `{delimiter}`")

# ‚úÖ Chargement du DataFrame
try:
    fichier = File(csv_path, delimiter=delimiter)
    stats = fichier.get_stats()
    df = stats["df"]

    st.success("‚úÖ Fichier bien charg√©.")
    st.markdown(f"üìè **Dimensions :** {df.shape[0]} lignes √ó {df.shape[1]} colonnes")
    st.markdown(f"üßæ **Colonnes d√©tect√©es :** {', '.join(df.columns)}")

except Exception as e:
    st.error(f"‚ùå Erreur lors du chargement du fichier : {e}")
    st.stop()

# ‚úÖ S√©lection des colonnes num√©riques
st.markdown("### üß™ S√©lection des colonnes √† traiter")
colonnes_numeriques = df.select_dtypes(include="number").columns.tolist()
colonnes_choisies = st.multiselect(
    "Colonnes num√©riques √† traiter :",
    colonnes_numeriques,
    help="Choisissez une ou plusieurs colonnes num√©riques pour l'imputation et la normalisation."
)

if colonnes_choisies:
    df_avant = df.copy()

    total_na = df[colonnes_choisies].isna().sum().sum()
    if total_na == 0:
        st.info("‚úÖ Aucune valeur manquante dans les colonnes s√©lectionn√©es.")
    else:
        st.info(f"Nombre total de valeurs manquantes dans la s√©lection : **{total_na}**")

    # ‚úÖ Traitement des valeurs manquantes
    st.markdown("### üß± Gestion des valeurs manquantes")
    methode_na = st.selectbox(
        "M√©thode de traitement :",
        [
            "Supprimer les lignes",
            "Supprimer les colonnes",
            "Remplir par la moyenne",
            "Remplir par la m√©diane",
            "Remplir par le mode",
            "Imputation KNN",
            "Imputation par r√©gression"
        ],
        help="S√©lectionnez la m√©thode pour traiter les valeurs manquantes. Les m√©thodes plus sophistiqu√©es peuvent √™tre plus lentes."
    )

    if methode_na == "Supprimer les lignes":
        df = df.dropna(subset=colonnes_choisies)

    elif methode_na == "Supprimer les colonnes":
        colonnes_a_supprimer = [col for col in colonnes_choisies if df[col].isna().any()]
        if colonnes_a_supprimer:
            df = df.drop(columns=colonnes_a_supprimer)
            colonnes_choisies = [col for col in colonnes_choisies if col not in colonnes_a_supprimer]
            st.warning(f"üóëÔ∏è Colonnes supprim√©es : {', '.join(colonnes_a_supprimer)}")
        else:
            st.info("‚úÖ Aucune des colonnes s√©lectionn√©es ne contient de valeur manquante.")

    elif methode_na == "Remplir par la moyenne":
        for col in colonnes_choisies:
            df[col] = df[col].fillna(df[col].mean())

    elif methode_na == "Remplir par la m√©diane":
        for col in colonnes_choisies:
            df[col] = df[col].fillna(df[col].median())

    elif methode_na == "Remplir par le mode":
        for col in colonnes_choisies:
            mode = df[col].mode()
            if not mode.empty:
                df[col] = df[col].fillna(mode[0])

    elif methode_na == "Imputation KNN":
        from sklearn.impute import KNNImputer
        colonnes_incompletes = [col for col in colonnes_choisies if df[col].isna().any()]
        if colonnes_incompletes:
            n_neighbors = st.number_input(
                "Nombre de voisins (K) :",
                min_value=1, max_value=20, value=3,
                help="Le nombre de voisins pour l'imputation KNN."
            )
            imputer = KNNImputer(n_neighbors=int(n_neighbors))
            with st.spinner("Imputation KNN en cours‚Ä¶"):
                arr = imputer.fit_transform(df[colonnes_incompletes])
                df_imputed = pd.DataFrame(arr, columns=colonnes_incompletes, index=df.index)
                df[colonnes_incompletes] = df_imputed
        else:
            st.info("‚úÖ Aucune colonne s√©lectionn√©e ne n√©cessite d'imputation.")

    elif methode_na == "Imputation par r√©gression":
        from sklearn.experimental import enable_iterative_imputer  # noqa
        from sklearn.impute import IterativeImputer
        colonnes_incompletes = [col for col in colonnes_choisies if df[col].isna().any()]
        if colonnes_incompletes:
            max_iter = st.number_input(
                "Nombre maximal d'it√©rations :",
                min_value=1, max_value=50, value=10,
                help="Le nombre maximal d'it√©rations pour l'imputation it√©rative."
            )
            imputer = IterativeImputer(random_state=0, max_iter=int(max_iter))
            with st.spinner("Imputation it√©rative en cours‚Ä¶"):
                arr = imputer.fit_transform(df[colonnes_incompletes])
                df_imputed = pd.DataFrame(arr, columns=colonnes_incompletes, index=df.index)
                df[colonnes_incompletes] = df_imputed
        else:
            st.info("‚úÖ Aucune colonne s√©lectionn√©e ne n√©cessite d'imputation.")

    # ‚úÖ Comparaison avant/apr√®s
    with st.expander("üìä Aper√ßu des valeurs manquantes avant/apr√®s"):
        avant = df_avant[colonnes_choisies].isna().sum()
        apres = df[colonnes_choisies].isna().sum()
        comparaison = pd.DataFrame({
            "Avant traitement": avant,
            "Apr√®s traitement": apres
        })
        st.dataframe(comparaison)

    st.success(f"‚úÖ Traitement des valeurs manquantes appliqu√© ({methode_na})")

    # ‚úÖ Normalisation
    st.markdown("### ‚öñÔ∏è Normalisation des colonnes")
    normalisation = st.selectbox(
        "M√©thode de normalisation :",
        [
            "Aucune",
            "Min-Max (0 ‚Üí 1)",
            "Z-score (moyenne 0, √©cart-type 1)",
            "RobustScaler (par m√©diane et IQR)"
        ],
        help="Choisissez une m√©thode de normalisation pour les colonnes trait√©es."
    )

    if normalisation != "Aucune":
        scaler = (
            MinMaxScaler()    if normalisation.startswith("Min-Max") else
            StandardScaler() if normalisation.startswith("Z-score") else
            RobustScaler()
        )
        with st.spinner("Application de la normalisation‚Ä¶"):
            arr = scaler.fit_transform(df[colonnes_choisies])
            df_scaled = pd.DataFrame(arr, columns=colonnes_choisies, index=df.index)
            df[colonnes_choisies] = df_scaled
        st.success(f"üìä Normalisation appliqu√©e : {normalisation}")
    else:
        st.info("Aucune normalisation appliqu√©e.")

else:
    st.info("S√©lectionnez d'abord des colonnes num√©riques pour activer l'imputation et la normalisation.")

# ‚úÖ Aper√ßu final et export
st.markdown("### ‚úÖ Donn√©es pr√©-trait√©es")
st.dataframe(df)

# Option : stocker pour future utilisation
st.session_state["df_pretraite"] = df

csv = df.to_csv(index=False).encode("utf-8")
st.download_button(
    "üíæ T√©l√©charger les donn√©es nettoy√©es",
    csv,
    file_name="donnees_traitees.csv",
    mime="text/csv"
)
