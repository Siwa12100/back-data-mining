from matplotlib import pyplot as plt
from sklearn.decomposition import PCA
import streamlit as st
import pandas as pd
import seaborn as sns

from src.classes.prediction import Prediction
from src.classes.clustering import Clustering

st.set_page_config(page_title="Pr√©-traitement", layout="centered")
st.title("Partie IV : Clustering ou pr√©diction")

df = st.session_state.get("df", None)
delimiter = st.session_state.get("delimiter", ",")

if df is not None:
    st.write("‚úÖ Donn√©es r√©cup√©r√©es depuis la session")
    st.dataframe(df.head())
else:
    st.warning("‚ö†Ô∏è Aucune donn√©e trouv√©e. Retournez √† l'√©tape d'upload.")
    st.stop()

mode = st.radio("Souhaitez-vous effectuer :", options=["Clustering", "Pr√©diction"])

if mode == "Clustering":
    num_cols = df.select_dtypes(include=["float64", "int64"]).columns.tolist()
    if not num_cols:
        st.error("‚ùå Aucune colonne num√©rique disponible pour le clustering.")
        st.stop()

    st.markdown("### üß™ Choix des variables pour le clustering")
    selected_cols = st.multiselect("S√©lectionnez les colonnes √† utiliser", options=num_cols, default=num_cols)

    if selected_cols:
        clustering = Clustering(df)
        clustering.set_features(selected_cols)

        st.markdown("### ‚öôÔ∏è Choix de l'algorithme de clustering")

        algo = st.selectbox(
            "Algorithme",
            options=["K-Means", "DBSCAN", "HCA (Hierarchical Clustering)"]
        )

        if algo == "K-Means":
            n_clusters = st.slider("Nombre de clusters (K)", min_value=2, max_value=10, value=3)
        elif algo == "DBSCAN":
            eps = st.slider("Œµ (rayon de voisinage)", min_value=0.1, max_value=10.0, value=0.5, step=0.1)
            min_samples = st.slider("Min. samples", min_value=1, max_value=10, value=5)
        elif algo == "HCA (Hierarchical Clustering)":
            n_clusters = st.slider("Nombre de clusters", min_value=2, max_value=10, value=3)

        if st.button("üöÄ Lancer le clustering"):
            try:
                if algo == "K-Means":
                    clustering.run_kmeans(n_clusters=n_clusters)
                elif algo == "DBSCAN":
                    clustering.run_dbscan(eps=eps, min_samples=min_samples)
                elif algo == "HCA (Hierarchical Clustering)":
                    clustering.run_hca(n_clusters=n_clusters)

                st.session_state["modele_type"] = "clustering"
                st.session_state["modele_objet"] = clustering
                st.success("‚úÖ Clustering termin√©. Redirection vers l‚Äô√©valuation...")
                st.switch_page("pages/5_√âvaluation_du_r√©sultat.py")

            except Exception as e:
                st.error(f"‚ùå Erreur lors du clustering : {e}")
    else:
        st.info("Veuillez s√©lectionner au moins une colonne pour d√©marrer.")
elif mode == "Pr√©diction":
    target_col = st.selectbox("üìå S√©lectionnez la variable cible", options=df.columns)
    feature_cols = st.multiselect("üß™ S√©lectionnez les variables explicatives", options=[col for col in df.columns if col != target_col])

    if feature_cols and target_col: 
        task_type = st.radio("Type de probl√®me :", options=["Classification", "R√©gression"])
        
        algo = None
        model_params = {}

        if task_type == "Classification":
            algo = st.selectbox("Choix de l'algorithme", ["Random Forest", "Logistic Regression"])
            if algo == "Random Forest":
                model_params["n_estimators"] = st.slider("Nombre d'arbres", 10, 300, 100)

        elif task_type == "R√©gression":
            algo = st.selectbox("Choix de l'algorithme", ["R√©gression Lin√©aire", "Arbre de r√©gression"])
            if algo == "Arbre de r√©gression":
                model_params["max_depth"] = st.slider("Profondeur max", 1, 20, 5)

        if st.button("üöÄ Entra√Æner le mod√®le"):
            try:
                predictor = Prediction(df, features=feature_cols, target=target_col, task_type=task_type)
                predictor.split()
                predictor.set_model(algo, **model_params)
                predictor.train()

                st.session_state["modele_type"] = "prediction"
                st.session_state["modele_objet"] = predictor
                st.success("‚úÖ Mod√®le entra√Æn√©. Redirection vers l‚Äô√©valuation...")
                st.switch_page("pages/5_√âvaluation_du_r√©sultat.py")

            except Exception as e:
                st.error(f"‚ùå Erreur : {e}")
        else:
            st.info("Veuillez s√©lectionner les colonnes d'entr√©e et la cible.")